{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \
18 Feb, 2014\
\
Morning:\
\
Functions to chain together:\
\
head: first lines of a file\
tail: Last lines of a file\
split: split a file into pieces\
cut: cut out selected portions of each line of a file\
unique: report or filter out repeated lines of a file.\
\
| : pipe: take output from the left as input to the right function\
<: use this file as standard input to the function at left\
>: create this file containing the standard output of the previous function\
*: wildcard for 0 or more characters of any type\
?: wildcard for any one character\
\
\
___________\
\
to create a file we'd like to execute, we can just write a series of shell commands in a text file and then execute it with ./textFileName.\
\
______________\
\
grep: grep --color=auto delay sorted-lengths  : finds string delay in file sorted-lengths, returns the lines which contain delay, with the string highlighted\
\
-v flag: lines which do not match the pattern\
-i: case insensitive\
can do complex patterns using regular expressions, but grep regular expressions are not standard.\
\
find: finds files, rather than lines in files.  Interesting interaction with wildcard: since find ./ *.txt looks in the current directory to fill in *, will fill in the names of .txt files in the current directory and then find for them.  If you put in the string as find ./ '*.txt', the string in quotes will be passed to find without being filled in first  Check syntax.\
\
tree: outputs file system structure from the current directory. (not on mac OS?)\
\
\
` quote: will let you pass something as a STRING to another command: \
wc -l `find . -name cats` runs find . -name cats, then passes this as a string input to wc-l\
\
The above is helpful for setting environment variables.\
\
\
grep FE `find . -name '*.pdb'`: find all files in the current directory which have a name ending in .pdb, then grep in these files for those including FE\
_________\
\
Variables\
\
env: prints out the current environment variables\
\
All values in shell variables are strings; numbers are thus represented as strings, e.g., 23 is the characters 2 and 3, not the number they conventionally represent.\
\
Lists are split with colons.\
\
echo prints its arguments.  To evaluate a variable, type $HOME (to return the contents of the variable $HOME), s.t. echo $HOME evaluates $HOME to, e.g., /Users/tadesautels, and then prints this string to the prompt.\
\
To set environment variables, type SECRET_IDENTITY=String\
\
Assignment of a value to a variable only changes the value in THIS shell, NOT its children.\
\
export makes environment variables global, such that they're inherited by shell scripts you launch from inside this shell.\
\
\
Simple for loop in the shell:\
for a in `ls *`; do echo $a; done  (echos the name of every file in the current folder).  Note that a is a string which we give the values in the sequence of string values generated by `ls *`\
\
\
commands in $HOME/.bashrc are executed when shell starts.\
\
\
Scripting: slides can be found at ucl.ac.uk/~uccaoke/slides\
\
alias can be used to create shortcuts\
\
\
_________________\
\
Afternoon session\
slides: development.rc.ucl.ac.uk/training/\
\
git repository is in hidden folder in the folder where you did git init, named .git.\
\
git diff syntax: git diff 3f298 5f00db9  where the horrible strings are the beginnings of the hashes of the individual commits.\
HEAD; git keyword for the most recent commit (locally)\
\
git log --graph --oneline  gives a plot in the terminal of merges and history.\
\
_________\
19 Feb 2014\
Morning session\
Python\
Forking off of UCL software carpentry website.\
\
}